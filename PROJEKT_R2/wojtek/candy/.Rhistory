library(FactoMineR)
pth ="C:\\Users\\miser\\Documents\\Projects\\GIT\\DATA_SCIENCE\\jdsz1-sqluci\\PROJEKT_R2\\wojtek\\candy\\"
cdf <- read.csv("candy-data.csv")
head(cdf)
summary(cdf)
#check if data has any NAs
mapply(anyNA, cdf) #nope! go further
#visualizing data
ggplot(cdf) + geom_point(aes(x = sugarpercent,y=pricepercent)) # no dependence
ggplot(cdf) + geom_point(aes(x = sugarpercent,y= winpercent)) # no dependence
ggplot(cdf) + geom_point(aes(x = pricepercent,y= winpercent)) # no dependence
pca_real = FactoMineR::PCA(cdf[c("sugarpercent","pricepercent","winpercent")]) #cannot be linearly separated
print(pca_real$eig)
pca_all = FactoMineR::PCA(cdf[c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]) #cannot be linearly separated
for (i in 2:8)
{
j=i+1;
while (j<=8)
{
print(paste(cn[i],cn[j],sep=" vs. "))
print(table(cdf[[i]],cdf[[j]]))
j=j+1
}
}
ggplot(cdf[c(1,2)]) + geom_bar(aes(x = chocolate))
cn <- colnames(cdf)
for (i in 1:8)
{
j=i+1;
while (j<=8)
{
print(paste(cn[i],cn[j],sep=" vs. "))
print(table(cdf[[i]],cdf[[j]]))
j=j+1
}
}
for (i in 2:8)
{
j=i+1;
while (j<=8)
{
print(paste(cn[i],cn[j],sep=" vs. "))
print(table(cdf[[i]],cdf[[j]]))
j=j+1
}
}
ggplot(cdf[c(1,2)]) + geom_bar(aes(x = chocolate))
#visualizing data
ggplot(cdf) + geom_point(aes(x = sugarpercent,y=pricepercent,col = winpercent)) # no dependence
ggplot(cdf) + geom_point(aes(x = sugarpercent,y= winpercent, col = pricepercent)) # no dependence
ggplot(cdf) + geom_point(aes(x = pricepercent,y= winpercent, col = sugarpercent)) # no dependence
?PCA
sample(1:row(cdf))
sample(1:nrow(cdf))
?row
N = nrow(cdf)
scrambled_index <- sample(1:N)
edge <- integer(0.6 *N)
train <- scrambled_index[1:edge]
test <- scrambled_index[edge+1:N]
test <- scrambled_index[(edge+1):N]
edge
N
edge <- round(0.6 *N)
train <- scrambled_index[1:edge]
test <- scrambled_index[(edge+1):N]
train
test
edge <- round(0.8 *N)
train <- scrambled_index[1:edge]
test <- scrambled_index[(edge+1):N]
cdf[test,]
model <- glm(chocolate ~.,family=binomial(link='logit'),data=cdf[test,])
model
model <- glm(chocolate ~.,family=binomial(link='logit'),data=cdf[test,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")])
model <- glm(chocolate ~.,family=binomial(link='logit'),data=cdf[test,c("chocolate","fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")])
summary(model)
cdf$hard
cdf$hard[train]
cdf$hard[test]
model <- glm(chocolate ~.,family=binomial(link='logit'),data=cdf[train,c("chocolate","fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")])
summary(model)
anova(model, test="Chisq")
?subset
test.df <- cdf[test,c("chocolate","fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]
pred_choco <- ifelse(predict(model,newdata=test.df,type='response') > 0.5,1,0)
as.data.frame(pred_choco,test.df$chocolate)
data.frame(pred_choco,test.df$chocolate)
check <- data.frame(pred_choco,test.df$chocolate)
table(pred_choco,test.df$chocolate)
matrixplot(table(pred_choco,test.df$chocolate))
confusion.matrix
confusion.matrix <- table(pred_choco,test.df$chocolate)
ggplot(data = confusion.matrix, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = confusion.matrix, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = data.frame(confusion.matrix), aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
data.frame(confusion.matrix)
check <- data.frame(predicted = pred_choco,observed = test.df$chocolate)
confusion.matrix <- table(check$predicted,check$observed)
confusion.matrix
ggplot(data = data.frame(confusion.matrix), aes(x=predicted, y=observed, fill=value)) +
geom_tile()
ggplot(data = check, aes(x=predicted, y=observed, fill=value)) +
geom_tile()
check
ggplot(data = check, aes(x=predicted, y=observed)) +
geom_tile()
geom_tile()
frequency(check)
confusion.matrix
confusion.matrix <- table(check$predicted,check$observed)
confusion.matrix
predicted <- factor(c(0, 0, 1, 1))
observed <- factor(c(0, 1, 0, 1))
Y      <- c(7, 0, 0, 10)
confusion.matrix.df <- data.frame(predicted, observed, Y)
confusion.matrix.df
confusion.matrix[1]
as.vector( confusion.matrix)
predicted <- factor(c(0, 0, 1, 1))
observed <- factor(c(0, 1, 0, 1))
Y      <- as.vector( confusion.matrix)
confusion.matrix.df <- data.frame(predicted, observed, Y)
ggplot(data =  pred_choco, mapping = aes(x = predicted, y = observed)) +
geom_tile(aes(fill = value), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",value)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
predicted <- factor(c(0, 0, 1, 1))
observed <- factor(c(0, 1, 0, 1))
Y      <- as.vector( confusion.matrix)
ggplot(data =  confusion.matrix.df, mapping = aes(x = predicted, y = observed)) +
geom_tile(aes(fill = value), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",value)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data =  confusion.matrix.df, mapping = aes(x = predicted, y = observed)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",value)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data =  confusion.matrix.df, mapping = aes(x = predicted, y = observed)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",Y)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data =  confusion.matrix.df, mapping = aes(x = observed, y = predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",Y)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
N
ROCRpred <- prediction(pred_choco, test.df$chocolate)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE)
pca_all
pca_all$eig
pca_all$eig[,1]
cdf[1,]%*%pca_all$eig[,1]
cdf[1,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]%*%pca_all$eig[,1]
cdf[1,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]
cdf[[1,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]]
cdf[1,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]
cdf[1,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")][1]
t <- cdf[1,c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]
t
class(t)
as.vector(class(t))
as.vector(t
)
as.vector(t)
as.vector(t)%*%pca_all$eig[,1]
pca_all
pca_all["eigenvalues"]
pca_all$eig
pca_all$eig[,1]
cdf[1,]
knitr::opts_chunk$set(echo = TRUE)
eig <- pca_all$eig[,1]
pt%*%eig
t(pt)%*%eig
class(pt)
pt
eig <- pca_all$eig[,1]
pt <- as.vector(cdf[1,])
t(pt)%*%eig
pt%*%eig
class(pt)
cdf[[1,]]
cdf[1,]
cdf[1,][[1]]
cdf[1,][[2:]]
cdf[1,][[2:8]]
cdf[1,][[2:5]]
cdf[1,][[2]]
cdf[1,][[3]]
y <- diag(x)
x <- 1:4
(z <- x %*% x)    # scalar ("inner") product (1 x 1 matrix)
drop(z)             # as scalar
y <- diag(x)
z <- matrix(1:12, ncol = 3, nrow = 4)
y %*% z
eig %*% eig
eig %*% pt
class(eig)
class(pt)
pt
pt <- cdf[[1,2:4]]
pt <- cdf[[1,2]]
pt
pt <- as.numeric(cdf[[1,]])
pt <- as.numeric(cdf[[1,]])
pt <- as.numeric(cdf[1,])
pt
pt <- as.numeric(cdf[1,2:6])
pt
feat <- c("chocolate","fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")
pt <- as.numeric(cdf[1,feat])
pt
pt%*%eig
pt%*%t(eig)
t(pt)%*%eig
eig <- pca_all$eig[,1]
pt <- as.numeric(cdf[1,feat])
t(pt)%*%eig
t(pt)%*%t(eig)
t(pt)
pt
matrix(pt,12,1)%*%t(eig)
matrix(pt,12,1)%*%(eig)
eig
matrix(pt,12,1)%*%t(eig)
eig
matrix(pt,12,1)%*%matrix(eig,12,1)
matrix(pt,12,1)%*%matrix(eig,1,12)
length(eig)
length(feat)
edge <- round(0.8 *N)
train <- scrambled_index[1:edge]
test <- scrambled_index[(edge+1):N]
feat <- c(,"fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")
feat <- c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")
target <- "chocolate"
train.df <- cdf[train,c(feat,target)]
model <- glm(chocolate ~.,family=binomial(link='logit'),data=train.df)
summary(model)
anova(model, test="Chisq")
test.df <- cdf[test,c(feat,target)]
pred_choco <- ifelse(predict(model,newdata=test.df,type='response') > 0.5,1,0)
check <- data.frame(predicted = pred_choco,observed = test.df$chocolate)
confusion.matrix <- table(check$predicted,check$observed)
predicted <- factor(c(0, 0, 1, 1))
observed <- factor(c(0, 1, 0, 1))
Y      <- as.vector( confusion.matrix)
confusion.matrix.df <- data.frame(predicted, observed, Y)
ggplot(data =  confusion.matrix.df, mapping = aes(x = observed, y = predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",Y)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
chisq_var <- c("chocolate","fruity","bar","winpercent")
scrambled_index <- sample(1:N)
edge <- round(0.8 *N)
train <- scrambled_index[1:edge]
test <- scrambled_index[(edge+1):N]
feat <- c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")
target <- "chocolate"
train.df <- cdf[train,c(feat,target)]
model <- glm(chocolate ~.,family=binomial(link='logit'),data=train.df)
summary(model)
anova(model, test="Chisq")
test.df <- cdf[test,c(feat,target)]
pred_choco <- ifelse(predict(model,newdata=test.df,type='response') > 0.5,1,0)
check <- data.frame(predicted = pred_choco,observed = test.df$chocolate)
confusion.matrix <- table(check$predicted,check$observed)
scrambled_index <- sample(1:N)
sample(1:N)
sample(1:N)
sample(1:N)
scrambled_index <- sample(1:N)
edge <- round(0.8 *N)
train <- scrambled_index[1:edge]
test <- scrambled_index[(edge+1):N]
feat <- c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")
target <- "chocolate"
train.df <- cdf[train,c(feat,target)]
model <- glm(chocolate ~.,family=binomial(link='logit'),data=train.df)
summary(model)
anova(model, test="Chisq")
test.df <- cdf[test,c(feat,target)]
pred_choco <- ifelse(predict(model,newdata=test.df,type='response') > 0.5,1,0)
check <- data.frame(predicted = pred_choco,observed = test.df$chocolate)
confusion.matrix <- table(check$predicted,check$observed)
predicted <- factor(c(0, 0, 1, 1))
observed <- factor(c(0, 1, 0, 1))
Y      <- as.vector( confusion.matrix)
confusion.matrix.df <- data.frame(predicted, observed, Y)
ggplot(data =  confusion.matrix.df, mapping = aes(x = observed, y = predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",Y)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
eig <- pca_all$eig[,1]
pt <- as.numeric(cdf[1,feat])
matrix(pt,12,1)%*%matrix(eig,1,12)
matrix(pt,11,1)%*%matrix(eig,1,11)
pca_all
matrix(pt,11,1)%*%matrix(eig,1,11)
matrix(pt,1,11)%*%matrix(eig,1,11)
matrix(pt,1,11)%*%matrix(eig,11,1)
eig <- pca_all$ind$coord
eig
pca_train <- FactoMineR::PCA(train.df)
eigv <- pca_all$ind$coord
pt <- as.numeric(cdf[1,feat])
matrix(pt,1,11)%*%eigv
matrix(pt,11,1)%*%eigv
eigv
?PCA
chisq.test(tbl)
print(fisher.test(table(cdf[[i]],cdf[[j]])))
ft = fisher.test(table(cdf[[i]],cdf[[j]]))
ft$p.value
ft$alternative
ft$estimate
matrix(c(100,0,0,100),nrow = 2)
fisher.test(matrix(c(100,0,0,100),nrow = 2))
fisher.test(matrix(c(100,0,100,0),nrow = 2))
fisher.test(matrix(c(100,100,100,100),nrow = 2))
fisher.test(table(cdf))
cdf
?table
fisher.test(table(cdf))
table(cdf)
head(cdf)
dychotomic <- c("fruity","caramel"," peanutyalmondy", "nougat", "crispedricewafer",
"hard", "bar","pluribus")
continuous <- c("sugarpercent", "pricepercent", "winpercent")
dychotomic <- c("fruity","caramel"," peanutyalmondy", "nougat", "crispedricewafer",
"hard", "bar","pluribus")
continuous <- c("sugarpercent", "pricepercent", "winpercent")
for (i in dychotomic)
{
cdf[i] = as.factor(cdf[i])
}
cdf[i]
cdf$fruity = as.factor(cdf$fruity)
cdf$fruity = as.factor(cdf$fruity)
dychotomic <- c("fruity","caramel","peanutyalmondy", "nougat", "crispedricewafer",
"hard", "bar","pluribus")
continuous <- c("sugarpercent", "pricepercent", "winpercent")
for (i in dychotomic)
{
cdf[i] = as.factor(cdf[i])
}
cdf$fruity = as.factor(cdf$fruity)
cdf$caramel = as.factor(cdf$caramel)
cdf$peanutyalmondy = as.factor(cdf$peanutyalmondy)
cdf$nougat = as.factor(cdf$nougat)
cdf$crispedricewafer = as.factor(cdf$crispedricewafer)
cdf$hard = as.factor(cdf$hard)
cdf$bar = as.factor(cdf$bar)
cdf$pluribus = as.factor(cdf$pluribus)
fisher.test(table(cdf))
ncol(cdf)
head(cdf)
source('~/Projects/GIT/DATA_SCIENCE/jdsz1-sqluci/PROJEKT_R2/monika/candy2.R', encoding = 'UTF-8')
library(ROCR)
library(ggplot2)
library(ggcorrplot)
wojtekPath = "C:\\Users\\miser\\Documents\\Projects\\GIT\\DATA_SCIENCE\\jdsz1-sqluci\\PROJEKT_R2\\monika\\candy-data.csv"
mydata<-read.csv(wojtekPath)
summary(mydata)
str(mydata)
mydata2 <- mydata[c(2:13)]
mapply(anyNA, mydata2)
# Compute a correlation matrix
corr <- round(cor(mydata2), 1)
head(corr[, 1:12])
# Compute a matrix of correlation p-values
p.mat <- cor_pmat(mydata2)
head(p.mat[, 1:12])
# Visualize the correlation matrix
# --------------------------------
# method = "square" (default)
ggcorrplot(corr)
# method = "circle"
ggcorrplot(corr, method = "circle")
# Reordering the correlation matrix
# --------------------------------
# using hierarchical clustering
ggcorrplot(corr, hc.order = TRUE, outline.col = "white")
# Types of correlogram layout
# --------------------------------
# Get the lower triangle
ggcorrplot(corr, hc.order = TRUE, type = "lower",
outline.col = "white")
# Get the upeper triangle
ggcorrplot(corr, hc.order = TRUE, type = "upper",
outline.col = "white")
# Add correlation coefficients
# --------------------------------
# argument lab = TRUE
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE)
# Add correlation significance level
# --------------------------------
# Argument p.mat
# Barring the no significant coefficient
ggcorrplot(corr, hc.order = TRUE,
type = "lower", p.mat = p.mat)
# Leave blank on no significant coefficient
ggcorrplot(corr, p.mat = p.mat, hc.order = TRUE,
type = "lower", insig = "blank")
#creat gml model for all variables but sugarpercent, pricepercent and winpercent
str(mydata)
mydata3 <- mydata[c(1:10)]
str(mydata3)
#change class into factors
mydata3$chocolate <- factor(mydata3$chocolate)
mydata3$fruity <- factor(mydata3$fruity)
mydata3$caramel <- factor(mydata3$caramel)
mydata3$peanutyalmondy <- factor(mydata3$peanutyalmondy)
mydata3$nougat <- factor(mydata3$nougat)
mydata3$crispedricewafer <- factor(mydata$crispedricewafer)
mydata3$hard <- factor(mydata$hard)
mydata3$bar <- factor(mydata3$bar)
mydata3$pluribus <- factor(mydata3$pluribus)
str(mydata3)
#chocalate probability
model1 <- glm(chocolate~competitorname+fruity+caramel+peanutyalmondy+nougat+crispedricewafer+hard+bar+pluribus, family=binomial(), data=mydata3)
summary(model1)
cdf$fruity
summary(model1)
# choco probability
choco_prob <- predict(model1, mydata3, type="response")
# choco probability
choco_prob <- predict(model1, mydata3, type="response")
choco_results <- cbind(mydata4, choco_prob)
str(mydata)
mydata3 <- mydata[c(2,3,9,12)]
mydata4 <- mydata[c(2,3,9,12)]
str(mydata4)
mydata4$pricepercent_bin <- 5
mydata4$pricepercent_bin <- ifelse(mydata4$pricepercent < 0.50, 0, mydata4$pricepercent_bin) # Below 0,5
mydata4$pricepercent_bin <- ifelse(mydata4$pricepercent >= 0.50, 1, mydata4$pricepercent_bin) #Above 0,5
mydata5 <- mydata4[c(1,2,3,5)]
#change class into factors
mydata5$chocolate <- factor(mydata5$chocolate)
mydata5$fruity <- factor(mydata5$fruity)
mydata5$bar <- factor(mydata5$bar)
mydata5$pricepercent_bin <- factor(mydata5$pricepercent_bin)
str(mydata5)
#glm model
model2 <- glm(chocolate~fruity+bar+pricepercent_bin, family=binomial(), data=mydata5)
summary(model2)
# choco probability
choco_prob <- predict(model2, mydata5, type="response")
choco_results <- cbind(mydata5, choco_prob)
# contingency matrix dla progu 50%
table(mydata5$chocolate, choco_prob > 0.5)
ROCRpred <- prediction(choco_prob, mydata5$chocolate)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
par(mfrow = c(1, 1))
plot(ROCRperf, colorize = TRUE)
summary(model1)
mydata3 <- mydata[c(2,3,9,12)]
mydata4 <- mydata[c(2,3,9,12)]
head(mydata4)
#glm model
model2 <- glm(chocolate~fruity+bar+pricepercent_bin, family=binomial(), data=mydata5)
summary(model2)
mydata4
train.df
ROCRpred
pca_all
pca_all
pca_all$var
pca_all$var
pca_all$var$coord
train.df <- pca_all$var$coord[train,]
pca_all = FactoMineR::PCA(cdf[c("fruity", "caramel", "peanutyalmondy", "nougat", "crispedricewafer", "hard", "bar", "pluribus", "sugarpercent", "pricepercent", "winpercent")]) #cannot be linearly separated
length(train)
length(test)
pvmatrix < matrix(nrow = 9,ncol=9
)
pvmatrix <- matrix(nrow = 9,ncol=9)
pvmatrix <- matrix(nrow = 9,ncol=9)
pvmatrix[1,1] <- 4
print(pvmatrix)
knitr::opts_chunk$set(echo = TRUE)
feat <- c("fruity",  "peanutyalmondy",  "bar", "winpercent")
target <- "chocolate"
train.df <- cdf[train,c(feat,target)]
log.reg.model <- glm(chocolate ~.,family=binomial(link='logit'),data=train.df)
summary(log.reg.model)
test.df <- cdf[test,c(feat,target)]
pred_choco <- ifelse(predict(log.reg.model,newdata=test.df,type='response') > 0.5,1,0)
check <- data.frame(predicted = pred_choco,observed = test.df$chocolate)
confusion.matrix <- table(check$predicted,check$observed)
predicted <- factor(c(0, 0, 1, 1))
observed <- factor(c(0, 1, 0, 1))
Y      <- as.vector( confusion.matrix)
confusion.matrix.df <- data.frame(predicted, observed, Y)
ggplot(data =  confusion.matrix.df, mapping = aes(x = observed, y = predicted)) +
geom_tile(aes(fill = Y), colour = "white") +
geom_text(aes(label = sprintf("%1.0f",Y)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue")
library(ggplot2)
shiny::runApp('~/Projects/GIT/DATA_SCIENCE/jdsz1-sqluci/PROJEKT_R1')
X<- c(3,2,4)
Y<- c(1,2)
Z<-X*Y
Z
Z
