model1<- lm(mtcars$mpg ~ mtcars$cyl)
model1
plot(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$cyl)
abline(model1, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
model1<- lm(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$cyl)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
model1<- lm(mtcars$mpg ~ mtcars$cyl)
model1
plot(mtcars$mpg ~ mtcars$cyl)
abline(model1, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
model1<- lm(mtcars$cyl ~ mtcars$mpg)
model1
plot(mtcars$cyl ~ mtcars$mpg)
abline(model1, col="blue", lwd=3)
model1<- lm(mtcars$cyl ~ mtcars$mpg)
model1
plot(mtcars$cyl ~ mtcars$mpg)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(mtcars$cyl ~ mtcars$mpg, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
model1<- lm(mtcars$cyl ~ mtcars$mpg)
model1
plot(mtcars$cyl ~ mtcars$mpg)
abline(model1, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
par(mfrow=c(3,4))
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp") #odwrotna proporcjonalność
abline(lm(mtcars$disp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp") #odwrotna proporcjonalność (duży błąd)
abline(lm(mtcars$hp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat") #proporcjonalnie (duży błąd)
abline(lm(mtcars$drat ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")  #odwrotna proporcjonalność
abline(lm(mtcars$wt ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec") #słaba zależność
abline(lm(mtcars$qsec ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  # proporcjonalnie (duży błąd)
abline(lm(mtcars$vs ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am") #słaba zależność
abline(lm(mtcars$am ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear") #słaba zależność
abline(lm(mtcars$gear ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #słaba zależność
abline(lm(mtcars$carb ~ mtcars$mpg), col="blue", lwd=3)
cor(mtcars$mpg, mtcars$qsec) # brak
?mtcars
par(mfrow=c(3,4))
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp") #odwrotna proporcjonalność
abline(lm(mtcars$disp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp") #odwrotna proporcjonalność (duży błąd)
abline(lm(mtcars$hp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat") #proporcjonalnie (duży błąd)
abline(lm(mtcars$drat ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")  #odwrotna proporcjonalność
abline(lm(mtcars$wt ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec") #słaba zależność
abline(lm(mtcars$qsec ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  # proporcjonalnie (duży błąd)
abline(lm(mtcars$vs ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am") #słaba zależność
abline(lm(mtcars$am ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear") #słaba zależność
abline(lm(mtcars$gear ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #słaba zależność
abline(lm(mtcars$carb ~ mtcars$mpg), col="blue", lwd=3)
par(mfrow=c(2,2))
boxplot(mtcars$mpg, main="mpg") # spora roznica miedzy 3 kwartylem a max
boxplot(mtcars$cyl, main="cyl") # rozklad idealny
boxplot(mtcars$disp, main="disp") # roznica  miedzy 3 kwartylem a max, między medianą a 3 kwartylem
boxplot(mtcars$hp, main="hp") # roznica  miedzy 3 kwartylem a max, między medianą a 3 kwartylem
par(mfrow=c(2,2))
boxplot(mtcars$drat, main="drat") #roznica miedzy 3 kwar. a max, miedzy 1 kwart. a mediana
boxplot(mtcars$wt, main="wt")  # roznica miedzy 1 kwart. a mediana
boxplot(mtcars$qsec, main="qsec") # roznica miedzy min a 1 kwart.
boxplot(mtcars$vs, main="vs") # mediana = min
par(mfrow=c(2,2))
boxplot(mtcars$am, main="am") # mediana = min
boxplot(mtcars$gear, main="gear") #  3 kwart = mediana
boxplot(mtcars$carb, main="carb") # 1 kwart = mediana
par(mfrow=c(3,4))
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$mpg), 1)))
polygon(density(mtcars$mpg), col="violet") # pozytywna skośność
plot(density(mtcars$cyl), main="Cyl", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$cyl), 1)))
polygon(density(mtcars$cyl), col="violet") # mała ujemna skośność
plot(density(mtcars$disp), main="Disp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$disp), 1)))
polygon(density(mtcars$disp), col="violet") # pozytywna skośność
plot(density(mtcars$hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet") #duża pozytywna skośność
plot(density(mtcars$drat), main="drat", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$drat), 1)))
polygon(density(mtcars$drat), col="violet") # mała pozytywna skośność
plot(density(mtcars$wt), main="wt", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$wt), 1)))
polygon(density(mtcars$wt), col="violet") # pozytywna skośność
plot(density(mtcars$qsec), main="qsec", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$qsec), 1)))
polygon(density(mtcars$qsec), col="violet") #pozytywna skośność
plot(density(mtcars$vs), main="vs", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$vs), 1)))
polygon(density(mtcars$vs), col="violet") #mała pozytywna skośność
plot(density(mtcars$am), main="am", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$am), 1)))
polygon(density(mtcars$am), col="violet") #pozytywna skośność
plot(density(mtcars$gear), main="gear", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$gear), 1)))
polygon(density(mtcars$gear), col="violet") # duża pozytywna skośność
plot(density(mtcars$carb), main="carb", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$carb), 1)))
polygon(density(mtcars$carb), col="violet") # bardzo duża pozytywna skośność
cor(mtcars$mpg, mtcars$cyl) # duża ujemna korelacja /
cor(mtcars$mpg, mtcars$disp) # duża ujemna korelacja /
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja /
cor(mtcars$mpg, mtcars$hp) #  ujemna korelacja  /
cor(mtcars$mpg, mtcars$drat) #  pozytywna korelacja  /
cor(mtcars$mpg, mtcars$vs) # pozytywna korelacja
cor(mtcars$mpg, mtcars$qsec) # brak /
cor(mtcars$mpg, mtcars$am) # mała pozytywna korelacja  /
cor(mtcars$mpg, mtcars$gear) # brak /
cor(mtcars$mpg, mtcars$carb) # mała ujemna korelacja /
?mtcars
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja /
#https://earthdatascience.org/courses/earth-analytics/get-data-using-apis/use-twitter-api-r/
install.packages("rtweet")
install.packages("httpuv")
library(rtweet)
library(httpuv)
appname <- "magda_sentiment_analysis"
key <- "Cw4v8f0xPkjZz1UTLTTI8czoq"
secret <- "HZ6RKMn9LJI6oMvUomN7ZxBxyXSZSeXvXOG15DTNArAv5waKvc"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
smolensk_tweets <- search_tweets(q = "#smolensk",
n = 20)
# pierwsze rekordy
head(smolensk_tweets, n = 30)
head(smolensk_tweets$screen_name)
head(smolensk_tweets$text)
head(smolensk_tweets$country_code)
# struktura
names(smolensk_tweets)
str(smolensk_tweets)
dim(smolensk_tweets)
# struktura
names(smolensk_tweets)
plot(retweet_count~favorite_count)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
top20 <- arrange(smolensk_tweets, desc(favorite_count))
head(top20, n = 20)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count, col="blue", lwd=3)
top20 <- arrange(smolensk_tweets, desc(favorite_count))
head(top20, n = 20)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count, col="blue", lwd=3)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
scatter.smooth(x=smolensk_tweets$retweet_count, y=smolensk_tweets$favorite_count, main="Retweet count & Fav count")
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
scatter.smooth(x=smolensk_tweets$retweet_count, y=smolensk_tweets$favorite_count, main="Retweet count & Fav count")
plot(mtcars$mpg~mtcars$cyl)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
plot(mtcars$mpg~mtcars$cyl)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
plot(mtcars$cyl~mtcars$mpg)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
plot(mtcars$cyl~mtcars$mpg)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
install.packages('ROCR')
install.packages('titanic')
library(ROCR)
library(titanic)
data('titanic_train')
?titanic_train
head(titanic_train)
str(titanic_train)
head(titanic_train)
titanic_data <- titanic_train[c("Survived", "Sex", "Age", "Pclass")]
mapply(anyNA,titanic_data)
titanic_data <- na.omit(titanic_data)  #odrzucenie pustych
titanic_data$Sex <- factor(titanic_data$Sex)
titanic_data$Pclass <- factor(titanic_data$Pclass)
glm_model <- glm(Survived ~ Sex + Age + Pclass,
data = titanic_data, family = "binomial")
surv_prob <- predict(glm_model, titanic_data, type="response")
titanic_results <- cbind(titanic_data, surv_prob)
table(titanic_data$Survived, surv_prob > 0.5)
ROCRpred <- prediction(surv_prob, titanic_data$Survived)
ROCRperf <- performance(ROCRpred, 'tpr', 'fpr')
table(titanic_data$Survived, surv_prob > 0.5)
table(titanic_data$Survived, surv_prob > 0.2)
table(titanic_data$Survived, surv_prob > 0.7)
table(titanic_data$Survived, surv_prob > 0.9)
par(mfrow= c(1,1))
par(mfrow= c(1,1))
plot(ROCRperf, colorize = TRUE)
auc <- performance(ROCRpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
install.packages('test2vec')
install.packages('data.table')
install.packages('magrittr')
install.packages("magrittr")
library(text2vec)
library(data.table)
library(magrittr)
install.packages('text2vec')
library(text2vec)
library(data.table)
library(magrittr)
data('movie_review')
setDT(movie_review)
setkey(movie_review)
set.seed(2018)
dim(movie_review)
test_ids = setdiff(all_ids, train_ids)
data('movie_review')
setDT(movie_review)
setkey(movie_review)
set.seed(2018)
dim(movie_review)
all_ids = movie_review$id
train_ids = sample(all_ids, 4000)
test_ids = setdiff(all_ids, train_ids)
train = movie_review[J(train_ids)]
train = movie_review[J(train_ids)]
test = movie_review[J(test_ids)]
prep_fun = tolower
tok_fun = word_tokenizer
it_train = itoken(train$review,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = train$id,
progressbar = FALSE)
vocab = create_vocabulary(it_train)
Vectorizer = vocab_vectorizer(vocab)
vocab
Vectorizer = vocab_vectorizer(vocab)
dtm_train = create_dtm(it_train, vectorizer)
dim(dtm_train)
vectorizer = vocab_vectorizer(vocab)
dtm_train = create_dtm(it_train, vectorizer)
dim(dtm_train)
library(glmnet)
install.packages('glmnet')
library(glmnet)
glmnet_classifier = cv.glmnet(x = dtm_train, y= train[['sentiment']],
family = 'binomial',
alpha = 1,
type.measire = 'auc',
nfolds = NFOLDS)
NFOLDS = 4
glmnet_classifier = cv.glmnet(x = dtm_train, y= train[['sentiment']],
family = 'binomial',
alpha = 1,
type.measure = 'auc',
nfolds = NFOLDS)
dtm_test = create_dtm(it_test, vectorizer)
preds = predict(glmnet_classifier, dtm_test, type = 'response')[,1]
glmnet:::auc(test$sentiment, preds)
glmnet_classifier = cv.glmnet(x = dtm_train, y= train[['sentiment']],
family = 'binomial',
alpha = 1,
type.measure = 'auc',
nfolds = NFOLDS)
it_test = test$review %>%
prep_fun %>% tok_fun %>%
itoken(ids = test$id, progressbar = FALSE)
dtm_test = create_dtm(it_test, vectorizer)
preds = predict(glmnet_classifier, dtm_test, type = 'response')[,1]
glmnet:::auc(test$sentiment, preds)
help(":::")
library(text2vec)
library(data.table)
library(magrittr)
data('movie_review')
setDT(movie_review)
setkey(movie_review)
set.seed(2018)
dim(movie_review)
all_ids = movie_review$id
train_ids = sample(all_ids, 4000)
test_ids = setdiff(all_ids, train_ids)
train = movie_review[J(train_ids)]
test = movie_review[J(test_ids)]
prep_fun = tolower
tok_fun = word_tokenizer
it_train = itoken(train$review,
preprocessor = prep_fun,
tokenizer = tok_fun,
ids = train$id,
progressbar = FALSE)
vocab = create_vocabulary(it_train)
vectorizer = vocab_vectorizer(vocab)
dtm_train = create_dtm(it_train, vectorizer)
dim(dtm_train)
####################
library(glmnet)
NFOLDS = 4
glmnet_classifier = cv.glmnet(x = dtm_train, y= train[['sentiment']],
family = 'binomial',
alpha = 1,
type.measure = 'auc',
nfolds = NFOLDS)
it_test = test$review %>%
prep_fun %>% tok_fun %>%
itoken(ids = test$id, progressbar = FALSE)
dtm_test = create_dtm(it_test, vectorizer)
preds = predict(glmnet_classifier, dtm_test, type = 'response')[,1]
glmnet:::auc(test$sentiment, preds)
View(movie_review)
head(titanic_train)
str(titanic_train)
dtm_test = create_dtm(it_test, vectorizer)
preds = predict(glmnet_classifier, dtm_test, type = 'response')[,1]
preds_class = predict(glmnet_classifier, dtm_test, type = 'class')[,1]
glmnet:::auc(test$sentiment, preds)
glmnet:::auc(test$sentiment, preds_class)
head(preds)
heard(preds_class)
head(preds_class)
glmnet:::auc(test$sentiment, preds)
glmnet:::auc(test$sentiment, preds_class)
ROCRpred <-predction(preds, test$sentiment)
ROCRpred <- predction(preds, test$sentiment)
ROCRperf <- performance(ROCRpred, 'tpr', 'fpr')
par(mfrow = c(1,1))
plot(ROCRperf, colorize = TRUE)
ROCRpred <- prediction(preds, test$sentiment)
ROCRperf <- performance(ROCRpred, 'tpr', 'fpr')
par(mfrow = c(1,1))
plot(ROCRperf, colorize = TRUE)
ROCRpred <- prediction(preds, test$sentiment)
ROCRperf <- performance(ROCRpred, 'tpr', 'fpr')
par(mfrow = c(1,1))
plot(ROCRperf, colorize = TRUE)
table(test$sentiment, preds>0.5)
data_with_predicted_sentiment <- cbind(test, preds)
write.csv(data_with_predicted_sentiment, 'data_with_predicted_sentiment.csv')
getwd()
data_with_predicted_sentiment
?titanic_train
data('titanic_train')
?titanic_train
data('titanic_train')
library(ROCR)
library(titanic)
data('titanic_train')
?titanic_train
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
weather <- read.table(file = "ftp://ftp.ncdc.noaa.gov/pub/data/ww-ii-data/ww-ii-data.txt", sep=",",dec=".", header=TRUE)
View(weather)
weather <- read.table(file = "ftp://ftp.ncdc.noaa.gov/pub/data/ww-ii-data/ww-ii-data.txt", sep=" ",dec=".", header=TRUE)
View(weather)
weather2 <- read.table(file = "weather.csv", sep=",",dec=".", header=TRUE)
weather2 <- read.table(file = "/Users/ja/R-Projects/linear_regressions/weather.csv", sep=",",dec=".", header=TRUE)
weather2 <- read.table(file = "/Users/ja/R-Projects/linear_regressions/weather.csv", sep=",",dec=".", header=TRUE)
weather2
weather2 <- read.table(file = "/Users/ja/R-Projects/linear_regressions/weather.csv", sep=",",dec=".", header=TRUE, na.strings=c("NA", "-", "?"))
library(readr)
weather <- read_csv("R-Projects/linear_regressions/weather.csv",
col_types = cols(Date = col_date(format = "%Y-%m-%d"),
MAX = col_number(), MEA = col_number(),
MIN = col_number(), MaxTemp = col_number(),
MeanTemp = col_number(), MinTemp = col_number(),
PRCP = col_number(), PoorWeather = col_number(),
Precip = col_number(), SNF = col_number(),
STA = col_number(), Snowfall = col_number(),
WindGustSpd = col_number()))
View(weather)
weather
library(readr)
locations <- read_csv("R-Projects/linear_regressions/locations.csv",
col_types = cols(ELEV = col_number(),
Latitude = col_number(), Longitude = col_number()))
View(locations)
locations
weather
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
shiny::runApp()
load("C:/Users/miser/Documents/Projects/GIT/DATA_SCIENCE/jdsz1-sqluci/PROJEKT_R2/wojtek/ww2temp/.RData")
library(tidyverse)
library(ggmap)
library(maps)
library(mapdata)
df_stations <- read.csv("data/Weather Station Locations.csv")
df_stations <- read.csv("data/Weather Station Locations.csv")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df2$.N
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df3
data.frame(daty,wynik,partia,metoda_badania)
daty
partia
partia <- c(rep("PiS",length(df2$PiS)),
rep("PO",length(df2$PO)),
rep("K'15",length(df2$`K'15`)),
rep("SLD",length(df2$SLD)),
rep(".N",length(df2$.N)),
rep("PSL",length(df2$PSL)),
rep("PARTIA RAZEM",length(df2$`PARTIA RAZEM`)),
rep("WOLNOSC",length(df2$WOLNOSC))
)
daty <- c(df2$Publikacja,df2$Publikacja,df2$Publikacja,df2$Publikacja,
df2$Publikacja,df2$Publikacja,df2$Publikacja,df2$Publikacja)
df3 <- data.frame(daty,wynik,partia,metoda_badania)
most_popular_method <- tail(names(sort(table(df2$`Metoda badania`))),1)
wynik <- c(df2$PiS,
df2$PO,
df2$`K'15`,
df2$SLD,
df2$.N,
df2$PSL,
df2$`PARTIA RAZEM`,
df2$WOLNOSC)
runApp()
data.frame(daty,wynik,partia,metoda_badania)
daty <- c(df2$Publikacja,df2$Publikacja,df2$Publikacja,df2$Publikacja,
df2$Publikacja,df2$Publikacja,df2$Publikacja,df2$Publikacja)
df2
df2 <- df_dane[2:nrow(df_dane),]
bool_app_init<-FALSE
link <- "https://docs.google.com/spreadsheets/d/1P9PG5mcbaIeuO9v_VE5pv6U4T2zyiRiFK_r8jVksTyk/htmlembed?single=true&gid=0&range=a10:o400&widget=false&chrome=false"
xData <- getURL(link)  #get link
dane_z_html <- readHTMLTable(xData, stringsAsFactors = FALSE, skip.rows = c(1,3), encoding = "utf8")
View(dane_z_html)
df_dane <- as.data.frame(dane_z_html)   #data frame
df_dane
df_dane
colnames(df_dane) <- df_dane[1,]
df_dane
df2 <- df_dane[2:nrow(df_dane),]
df2
df_dane
df2
for (i in 8:16)
df2[[i]] <- as.numeric(gsub(",",".",df2[[i]]))
df2
colnames(df2)[2]
colnames(df2)[15]
colnames(df2)[2] <- "Osrodek"
colnames(df2)[15] <- "WOLNOSC"
runApp()
runApp()
data.frame(daty,wynik,partia,metoda_badania)
daty
c(df2$Publikacja,df2$Publikacja,df2$Publikacja,df2$Publikacja,
df2$Publikacja,df2$Publikacja,df2$Publikacja,df2$Publikacja)
runApp()
runApp()
runApp()
