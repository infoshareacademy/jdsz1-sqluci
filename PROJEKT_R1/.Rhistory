<<<<<<< HEAD
print(linearMod)
# 2. Airquality
# 2.1. Ładowanie i eksploracja datasetu Air Quality
data("airquality")
?airquality
str(airquality)
head(airquality)
# 2.2. Przygotowanie danych
# Sprawdź dokumentację dla funkcji mapply
?mapply
# Sprawdź czy występują kolumny z brakującymi danymi
col1 <-mapply(anyNA, airquality)
col1
# Zmień brakujące wartości na miesięczną średnią, osobno dla Ozonu i Solar.R
for (i in 1:nrow(airquality)){
if(is.na(airquality[i, "Ozone"])){
airquality[i,"Ozone"] <- mean(airquality[which(airquality[,"Month"]==airquality[i, "Month"]),
"Ozone"],na.rm = TRUE)
=======
mapping=aes(x=konto, y=kwota),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
version
ggplot(data=rekompensaty_db, mapping = aes(x=konto, y-kwota)) +
geom_boxplot()
ggplot(data=rekompensaty_db, mapping = aes(x=konto, y-kwota)) +
geom_boxplot()
ggplot(data=rekompensaty_db, mapping = aes(x=konto, y=kwota)) +
geom_boxplot()
ggplot(data=wnioski_db,
mapping=aes(x=jezyk, y=kwota_rekompensaty)) +
ylim(0,5000) +
geom_boxplot(outlier.colour="red", outlier.shape = 1)
ggplot(data=wnioski_db,
mapping=aes(x=jezyk, y=kwota_rekompensaty)) +
ylim(0,5000) +
geom_boxplot(outlier.colour="red", outlier.shape = 1,) +
coord_flip()
ggplot(data=wnioski_db,
mapping=aes(x=jezyk, y=kwota_rekompensaty)) +
ylim(0,5000) +
geom_boxplot(outlier.colour="red", outlier.shape = 1) +
coord_flip()
#histogram
ggplot(data = wnioski_db) +
geom_histogram(mapping = aes(x = kwota_rekompensaty))
install.packages("shinydashboard")
library(shinydashboard)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(scales)
library(wordcloud)
library(syuzhet)
install.packages("wordcloud")
install.packages("syuzhet")
install.packages("tidyverse")
library(shinydashboard)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(scales)
library(wordcloud)
library(syuzhet)
library(tidyverse)
library(XML)
library(RCurl)
library(tidyr)
ui <- dashboardPage(
# HEADER
################################################################################################
dashboardHeader(title = "Analiza sondazy wyborczych"
#,dropdownMenu(type = "tasks",
#             taskItem("ABC")
#             )
),
# SIDEBAR
################################################################################################
dashboardSidebar(
sidebarMenu(
menuItem("Partie polityczne (DEV)", tabName = "tab_partie", icon = icon("th")),
menuItem("Wyniki", tabName = "tab_wyniki_ogolne", icon = icon("dashboard"),  badgeColor = "green",
menuSubItem("Wyniki ogolnie", tabName = "tab_wyniki_ogolne", icon = icon("th")),
menuSubItem("Wyniki szczegolowe", tabName = "tab_wyniki_szczegolowe", icon = icon("th"))
),
menuItem("Text mining (DEV)", tabName = "tab_text_mining", icon = icon("th"),
menuSubItem("Czestosc slow", tabName = "tab_text_mining_czestosc_slow", icon = icon("th")),
menuSubItem("Chmura slow", tabName = "tab_text_mining_chmura_slow", icon = icon("th")),
menuSubItem("Find freq terms", tabName = "tab_text_mining_czestosci", icon = icon("th")),
menuSubItem("Asocjacje", tabName = "tab_text_mining_asocjacje", icon = icon("th")),
menuSubItem("Emocje", tabName = "tab_text_mining_emocje", icon = icon("th")),
menuSubItem("Sentyment", tabName = "tab_text_mining_sentyment", icon = icon("th"))
),
menuItem("Tworcy", tabName = "tab_creators", icon = icon("th"),
menuSubItem("Monika Serkowska", tabName = "tab_creators_ms", icon = icon("th")),
menuSubItem("Magdalena Kortas", tabName = "tab_creators_mk", icon = icon("th")),
menuSubItem("Wojciech Artichowicz", tabName = "tab_creators_wa", icon = icon("th"))
)
)
),
# BODY
################################################################################################
dashboardBody(
tabItems(
# Partie
################################################################################################
tabItem(tabName = "tab_partie",
fluidRow(
h2("Analiza partii politycznych")
),
fluidRow(
plotOutput("wykresy")
)
),
# Wyniki
################################################################################################
#ogolne
tabItem(tabName = "tab_wyniki_ogolne",
fluidRow(
h2("Uogolnione wyniki sondazy wyborczych")
),
fluidRow(
column(width = 10,
dataTableOutput("results")
)
)
),
tabItem(tabName = "tab_wyniki_szczegolowe",
fluidRow(
radioButtons("in_rb_partie", label = h3("Partia polityczna"),
choices = list("A","B"),
inline = TRUE
),
fluidRow(plotOutput("plot_partie"))
)
),
# Text mining
################################################################################################
tabItem(tabName = "tab_text_mining",
fluidRow(
h2("Text mining ogolna")
)
),
tabItem(tabName = "tab_text_mining_czestosc_slow",
fluidRow(
h2("Text mining :: czestosc slow")
),
fluidRow(
column(width = 6, plotOutput("word_freq_magda")
)
)
),
tabItem(tabName = "tab_text_mining_chmura_slow",
fluidRow(
h2("Text mining :: chmura slow")
)
),
tabItem(tabName = "tab_text_mining_czestosci",
fluidRow(
h2("Text mining :: czestosci (?)")
)
),
tabItem(tabName = "tab_text_mining_asocjacje",
fluidRow(
h2("Text mining :: asocjacje")
)
),
tabItem(tabName = "tab_text_mining_emocje",
fluidRow(
h2("Text mining :: emocje")
)
),
tabItem(tabName = "tab_text_mining_sentyment",
fluidRow(
h2("Text mining :: sentyment")
)
),
# Credits
################################################################################################
tabItem(tabName = "tab_creators", fluidRow(h2("Tworcy") ),
menuSubItem("Monika Serkowska", tabName = "tab_creators_ms", icon = icon("th")),
menuSubItem("Magdalena Kortas", tabName = "tab_creators_mk", icon = icon("th")),
menuSubItem("Wojciech Artichowicz", tabName = "tab_creators_wa", icon = icon("th"))
)
)
)
)
ui <- dashboardPage(
# HEADER
################################################################################################
dashboardHeader(title = "Analiza sondazy wyborczych"
#,dropdownMenu(type = "tasks",
#             taskItem("ABC")
#             )
),
# SIDEBAR
################################################################################################
dashboardSidebar(
sidebarMenu(
menuItem("Partie polityczne (DEV)", tabName = "tab_partie", icon = icon("th")),
menuItem("Wyniki", tabName = "tab_wyniki_ogolne", icon = icon("dashboard"),  badgeColor = "green",
menuSubItem("Wyniki ogolnie", tabName = "tab_wyniki_ogolne", icon = icon("th")),
menuSubItem("Wyniki szczegolowe", tabName = "tab_wyniki_szczegolowe", icon = icon("th"))
),
menuItem("Text mining (DEV)", tabName = "tab_text_mining", icon = icon("th"),
menuSubItem("Czestosc slow", tabName = "tab_text_mining_czestosc_slow", icon = icon("th")),
menuSubItem("Chmura slow", tabName = "tab_text_mining_chmura_slow", icon = icon("th")),
menuSubItem("Find freq terms", tabName = "tab_text_mining_czestosci", icon = icon("th")),
menuSubItem("Asocjacje", tabName = "tab_text_mining_asocjacje", icon = icon("th")),
menuSubItem("Emocje", tabName = "tab_text_mining_emocje", icon = icon("th")),
menuSubItem("Sentyment", tabName = "tab_text_mining_sentyment", icon = icon("th"))
),
menuItem("Tworcy", tabName = "tab_creators", icon = icon("th"),
menuSubItem("Monika Serkowska", tabName = "tab_creators_ms", icon = icon("th")),
menuSubItem("Magdalena Kortas", tabName = "tab_creators_mk", icon = icon("th")),
menuSubItem("Wojciech Artichowicz", tabName = "tab_creators_wa", icon = icon("th"))
)
)
),
# BODY
################################################################################################
dashboardBody(
tabItems(
# Partie
################################################################################################
tabItem(tabName = "tab_partie",
fluidRow(
h2("Analiza partii politycznych")
),
fluidRow(
plotOutput("wykresy")
)
),
# Wyniki
################################################################################################
#ogolne
tabItem(tabName = "tab_wyniki_ogolne",
fluidRow(
h2("Uogolnione wyniki sondazy wyborczych")
),
fluidRow(
column(width = 10,
dataTableOutput("results")
)
)
),
tabItem(tabName = "tab_wyniki_szczegolowe",
fluidRow(
radioButtons("in_rb_partie", label = h3("Partia polityczna"),
choices = list("A","B"),
inline = TRUE
),
fluidRow(plotOutput("plot_partie"))
)
),
# Text mining
################################################################################################
tabItem(tabName = "tab_text_mining",
fluidRow(
h2("Text mining ogolna")
)
),
tabItem(tabName = "tab_text_mining_czestosc_slow",
fluidRow(
h2("Text mining :: czestosc slow")
),
fluidRow(
column(width = 6, plotOutput("word_freq_magda")
)
)
),
tabItem(tabName = "tab_text_mining_chmura_slow",
fluidRow(
h2("Text mining :: chmura slow")
)
),
tabItem(tabName = "tab_text_mining_czestosci",
fluidRow(
h2("Text mining :: czestosci (?)")
)
),
tabItem(tabName = "tab_text_mining_asocjacje",
fluidRow(
h2("Text mining :: asocjacje")
)
),
tabItem(tabName = "tab_text_mining_emocje",
fluidRow(
h2("Text mining :: emocje")
)
),
tabItem(tabName = "tab_text_mining_sentyment",
fluidRow(
h2("Text mining :: sentyment")
)
),
# Credits
################################################################################################
tabItem(tabName = "tab_creators", fluidRow(h2("Tworcy") ),
menuSubItem("Monika Serkowska", tabName = "tab_creators_ms", icon = icon("th")),
menuSubItem("Magdalena Kortas", tabName = "tab_creators_mk", icon = icon("th")),
menuSubItem("Wojciech Artichowicz", tabName = "tab_creators_wa", icon = icon("th"))
)
)
)
)
bool_app_init <- TRUE
server <- function(input, output,session) {
if (bool_app_init){
print("init - loading data")
bool_app_init<-FALSE
link <- "https://docs.google.com/spreadsheets/d/1P9PG5mcbaIeuO9v_VE5pv6U4T2zyiRiFK_r8jVksTyk/htmlembed?single=true&gid=0&range=a10:o400&widget=false&chrome=false"
xData <- getURL(link)  #get link
dane_z_html <- readHTMLTable(xData, stringsAsFactors = FALSE, skip.rows = c(1,3), encoding = "utf8") #read html
df_dane <- as.data.frame(dane_z_html)   #data frame
colnames(df_dane) <- df_dane[1,]  #nazwy kolumn
df2 <- df_dane[2:nrow(df_dane),]
rm(df_dane)
rm(dane_z_html)
rm(xData)
for (i in 8:16)
df2[[i]] <- as.numeric(gsub(",",".",df2[[i]]))      # remove commas
colnames(df2)[2]<- "Osrodek"
>>>>>>> 7d92d01f7374c69cad0abf54c71757568df6a237
}
if(is.na(airquality[i, "Solar.R"])){
airquality[i,"Solar.R"] <- mean(airquality[which(airquality[,"Month"]==airquality[i, "Month"]),
"Solar.R"],na.rm = TRUE)
}
}
normalize <- function(x){
return((x-min(x))/(max(x)-min(x)))
}
airquality$Ozone <- normalize(airquality$Ozone)
airquality$Solar.R <- normalize(airquality$Solar.R)
str(airquality)
# 2.3. Regresja liniowa z wykorzystaniem funkcli lm
# Badamy jak promieniowanie słoneczne wpływa na ozon
Y <- airquality[, "Ozone"]
X <- airquality[, "Solar.R"]
model1<- lm(Y~X)
model1
plot(Y~X)
abline(model1, col="blue", lwd=3)
?abline
Y <- airquality[, "Ozone"]
Z <- airquality[, "Wind"]
model2<- lm(Y~Z)
model2
-----
linearMod <- lm(Y~Z)
-----
linearMod <- lm(Y ~ Z, data=airquality)
linearMod <- lm(Y ~ Z, data=airquality)
print(linearMod)
model2
print(linearMod)
linearMod
linearMod <- lm(Y ~ Z)
print(linearMod)
linearMod
model2<- lm(Y~Z)
plot(Y~Z)
abline(model2, col="blue", lwd=3)
?abline
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl")
library(e1071)
data("mtcars")
head(mtcars)
?mtcars
str(mtcars)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl")
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp")
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl")
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp")
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp")
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat")
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec")
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am")
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear")
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb")
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl")
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp")
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp")
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat")
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec")
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #mały cyl i duże mpg
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp") #mały disp i duże mpg
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp") #małe hp i duże mpg
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat") #proporcjonalnie
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")  #
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec")
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am")
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear")
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb")
head(mtcars)
par(mfrow=c(4,3))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
boxplot(mtcars$disp, main="disp")
boxplot(mtcars$hp, main="hp")
boxplot(mtcars$drat, main="drat")
boxplot(mtcars$wt, main="wt")
boxplot(mtcars$qsec, main="qsec")
boxplot(mtcars$vs, main="vs")
boxplot(mtcars$am, main="am")
boxplot(mtcars$gear, main="gear")
boxplot(mtcars$carb, main="carb")
boxplot(mtcars$mpg, main="mpg")
boxplot(cars$speed, main="Speed")
par(mfrow=c(1,2))
boxplot(cars$speed, main="Speed")
boxplot(cars$dist, main="Distance")
boxplot(cars$speed, main="Speed")
boxplot(cars$dist, main="Distance")
par(mfrow=c(4,3))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
par(mfrow=c(1,2))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
par(mfrow=c(1,2))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
boxplot(mtcars$disp, main="disp")
boxplot(mtcars$hp, main="hp")
boxplot(mtcars$drat, main="drat")
par(mfrow=c(2,2))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
boxplot(mtcars$disp, main="disp")
boxplot(mtcars$hp, main="hp")
par(mfrow=c(2,2))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
boxplot(mtcars$disp, main="disp")
boxplot(mtcars$hp, main="hp")
par(mfrow=c(2,2))
boxplot(mtcars$am, main="am")
boxplot(mtcars$gear, main="gear")
boxplot(mtcars$carb, main="carb")
par(mfrow=c(2,2))
boxplot(mtcars$mpg, main="mpg")
boxplot(mtcars$cyl, main="cyl")
boxplot(mtcars$disp, main="disp")
boxplot(mtcars$hp, main="hp")
par(mfrow=c(2,2))
boxplot(mtcars$drat, main="drat")
boxplot(mtcars$wt, main="wt")
boxplot(mtcars$qsec, main="qsec")
boxplot(mtcars$vs, main="vs")
boxplot(mtcars$vs, main="vs")
par(mfrow=c(2,2))
boxplot(mtcars$am, main="am")
boxplot(mtcars$gear, main="gear")
boxplot(mtcars$carb, main="carb")
par(mfrow=c(2,2))
boxplot(mtcars$drat, main="drat") #roznica miedzy 3 kwar. a max, miedzy 2 kwart. a mediana
boxplot(mtcars$wt, main="wt")  # roznica miedzy 2 kwart. a mediana
boxplot(mtcars$qsec, main="qsec") # roznica miedzy min a 2 kwart.
boxplot(mtcars$vs, main="vs") # mediana = min
par(mfrow=c(2,2))
boxplot(mtcars$am, main="am") # mediana = min
boxplot(mtcars$gear, main="gear") #  3 kwart = m
boxplot(mtcars$carb, main="carb") # 2 kwart = mediana
par(mfrow=c(1,2))
plot(density(cars$speed), main="Speed", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(cars$speed), 1)))
polygon(density(cars$speed), col="violet")
plot(density(cars$dist), main="Distance", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(cars$dist), 1)))
polygon(density(cars$dist), col="blue")
par(mfrow=c(3,4))
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(cars$mpg), 1)))
polygon(density(cars$mpg), col="blue")
par(mfrow=c(3,4))
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(cars$mpg), 1)))
polygon(density(cars$mpg), col="violet")
library(e1071)
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(cars$mpg), 1)))
polygon(density(cars$mpg), col="violet")
par(mfrow=c(1,2))
plot(density(cars$speed), main="Speed", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(cars$speed), 1)))
polygon(density(cars$speed), col="violet")
ars$speed
cars$speed
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$mpg), 1)))
polygon(density(mtcars$mpg), col="violet")
plot(density(mtcars$cyl), main="Cyl", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$cyl), 1)))
polygon(density(mtcars$cyl), col="violet")
plot(density(mtcars$disp), main="Disp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$disp), 1)))
polygon(density(mtcars$disp), col="violet")
plot(density(mtcars$Hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet")
plot(density(mtcars$Hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet")
plot(density(mtcars$Hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet")
plot(density(mtcars$hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet")
plot(density(mtcars$am), main="am", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$am), 1)))
polygon(density(mtcars$am), col="violet")
# Funkacja gęstośći - sprawdzamy czy zmienna zależna ma rozkład normalny
par(mfrow=c(3,4))
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$mpg), 1)))
polygon(density(mtcars$mpg), col="violet")
plot(density(mtcars$cyl), main="Cyl", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$cyl), 1)))
polygon(density(mtcars$cyl), col="violet")
plot(density(mtcars$disp), main="Disp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$disp), 1)))
polygon(density(mtcars$disp), col="violet")
plot(density(mtcars$hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet")
plot(density(mtcars$drat), main="drat", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$drat), 1)))
polygon(density(mtcars$drat), col="violet")
plot(density(mtcars$wt), main="wt", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$wt), 1)))
polygon(density(mtcars$wt), col="violet")
plot(density(mtcars$qsec), main="qsec", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$qsec), 1)))
polygon(density(mtcars$qsec), col="violet")
plot(density(mtcars$vs), main="vs", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$vs), 1)))
polygon(density(mtcars$vs), col="violet")
plot(density(mtcars$am), main="am", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$am), 1)))
polygon(density(mtcars$am), col="violet")
plot(density(mtcars$gear), main="gear", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$gear), 1)))
polygon(density(mtcars$gear), col="violet")
plot(density(mtcars$carb), main="carb", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$carb), 1)))
polygon(density(mtcars$carb), col="violet")
cor(mtcars$mpg, mtcars$cyl)
cor(mtcars$mpg, mtcars$cyl)
cor(mtcars$mpg, mtcars$disp)
cor(mtcars$mpg, mtcars$hp)
cor(mtcars$mpg, mtcars$drat)
cor(mtcars$mpg, mtcars$wt)
cor(mtcars$mpg, mtcars$qsec)
cor(mtcars$mpg, mtcars$vs)
cor(mtcars$mpg, mtcars$am)
cor(mtcars$mpg, mtcars$gear)
cor(mtcars$mpg, mtcars$carb)
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #mniejszy carb i duży mpg
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #mniejszy carb i duży mpg
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear") #słaba zależność
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #słaba zależność
cor(mtcars$mpg, mtcars$qsec) # mała pozytywna korelacja
cor(mtcars$mpg, mtcars$vs) # duża pozytywna korelacja
cor(mtcars$mpg, mtcars$am) # pozytywna korelacja
cor(mtcars$mpg, mtcars$gear) # mała pozytywna korelacja
cor(mtcars$mpg, mtcars$carb) # ujemna korelacja
cor(mtcars$mpg, mtcars$vs) # duża pozytywna korelacja
cor(mtcars$mpg, mtcars$cyl) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$disp) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$hp) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$drat) # duża pozytywna korelacja
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$qsec) # słaba korelacja
cor(mtcars$mpg, mtcars$vs) # duża pozytywna korelacja
cor(mtcars$mpg, mtcars$am) # pozytywna korelacja
cor(mtcars$mpg, mtcars$gear) # słaba korelacja
cor(mtcars$mpg, mtcars$carb) # ujemna korelacja
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  #słaba zależność
cor(mtcars$mpg, mtcars$cyl) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$disp) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$hp) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$drat) # duża pozytywna korelacja
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja
source('~/R-Projects/regressions/homework.R')
cor(mtcars$mpg, mtcars$cyl) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$cyl) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$disp) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$hp) #  ujemna korelacja
cor(mtcars$mpg, mtcars$drat) #  pozytywna korelacja
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja
cor(mtcars$mpg, mtcars$qsec) # słaba korelacja
cor(mtcars$mpg, mtcars$vs) # pozytywna korelacja
cor(mtcars$mpg, mtcars$am) # pozytywna korelacja
cor(mtcars$mpg, mtcars$gear) # słaba korelacja
cor(mtcars$mpg, mtcars$carb) # ujemna korelacja
model2<- lm(Y~Z)
model2
plot(Y~Z)
abline(model2, col="blue", lwd=3)
model1<- lm(mtcars$mpg ~ mtcars$cyl)
model1
plot(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$cyl)
abline(model1, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
model1<- lm(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$cyl)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
model1<- lm(mtcars$mpg ~ mtcars$cyl)
model1
plot(mtcars$mpg ~ mtcars$cyl)
abline(model1, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
model1<- lm(mtcars$cyl ~ mtcars$mpg)
model1
plot(mtcars$cyl ~ mtcars$mpg)
abline(model1, col="blue", lwd=3)
model1<- lm(mtcars$cyl ~ mtcars$mpg)
model1
plot(mtcars$cyl ~ mtcars$mpg)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(mtcars$cyl ~ mtcars$mpg, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
model1<- lm(mtcars$cyl ~ mtcars$mpg)
model1
plot(mtcars$cyl ~ mtcars$mpg)
abline(model1, col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
par(mfrow=c(3,4))
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp") #odwrotna proporcjonalność
abline(lm(mtcars$disp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp") #odwrotna proporcjonalność (duży błąd)
abline(lm(mtcars$hp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat") #proporcjonalnie (duży błąd)
abline(lm(mtcars$drat ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")  #odwrotna proporcjonalność
abline(lm(mtcars$wt ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec") #słaba zależność
abline(lm(mtcars$qsec ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  # proporcjonalnie (duży błąd)
abline(lm(mtcars$vs ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am") #słaba zależność
abline(lm(mtcars$am ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear") #słaba zależność
abline(lm(mtcars$gear ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #słaba zależność
abline(lm(mtcars$carb ~ mtcars$mpg), col="blue", lwd=3)
cor(mtcars$mpg, mtcars$qsec) # brak
?mtcars
par(mfrow=c(3,4))
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$disp, main="MPG & Disp") #odwrotna proporcjonalność
abline(lm(mtcars$disp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$hp, main="MPG & hp") #odwrotna proporcjonalność (duży błąd)
abline(lm(mtcars$hp ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$drat, main="MPG & drat") #proporcjonalnie (duży błąd)
abline(lm(mtcars$drat ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$wt, main="MPG & wt")  #odwrotna proporcjonalność
abline(lm(mtcars$wt ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$qsec, main="MPG & qsec") #słaba zależność
abline(lm(mtcars$qsec ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$vs, main="MPG & vs")  # proporcjonalnie (duży błąd)
abline(lm(mtcars$vs ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$am, main="MPG & am") #słaba zależność
abline(lm(mtcars$am ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$gear, main="MPG & gear") #słaba zależność
abline(lm(mtcars$gear ~ mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$carb, main="MPG & carb") #słaba zależność
abline(lm(mtcars$carb ~ mtcars$mpg), col="blue", lwd=3)
par(mfrow=c(2,2))
boxplot(mtcars$mpg, main="mpg") # spora roznica miedzy 3 kwartylem a max
boxplot(mtcars$cyl, main="cyl") # rozklad idealny
boxplot(mtcars$disp, main="disp") # roznica  miedzy 3 kwartylem a max, między medianą a 3 kwartylem
boxplot(mtcars$hp, main="hp") # roznica  miedzy 3 kwartylem a max, między medianą a 3 kwartylem
par(mfrow=c(2,2))
boxplot(mtcars$drat, main="drat") #roznica miedzy 3 kwar. a max, miedzy 1 kwart. a mediana
boxplot(mtcars$wt, main="wt")  # roznica miedzy 1 kwart. a mediana
boxplot(mtcars$qsec, main="qsec") # roznica miedzy min a 1 kwart.
boxplot(mtcars$vs, main="vs") # mediana = min
par(mfrow=c(2,2))
boxplot(mtcars$am, main="am") # mediana = min
boxplot(mtcars$gear, main="gear") #  3 kwart = mediana
boxplot(mtcars$carb, main="carb") # 1 kwart = mediana
par(mfrow=c(3,4))
plot(density(mtcars$mpg), main="Mpg", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$mpg), 1)))
polygon(density(mtcars$mpg), col="violet") # pozytywna skośność
plot(density(mtcars$cyl), main="Cyl", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$cyl), 1)))
polygon(density(mtcars$cyl), col="violet") # mała ujemna skośność
plot(density(mtcars$disp), main="Disp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$disp), 1)))
polygon(density(mtcars$disp), col="violet") # pozytywna skośność
plot(density(mtcars$hp), main="hp", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$hp), 1)))
polygon(density(mtcars$hp), col="violet") #duża pozytywna skośność
plot(density(mtcars$drat), main="drat", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$drat), 1)))
polygon(density(mtcars$drat), col="violet") # mała pozytywna skośność
plot(density(mtcars$wt), main="wt", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$wt), 1)))
polygon(density(mtcars$wt), col="violet") # pozytywna skośność
plot(density(mtcars$qsec), main="qsec", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$qsec), 1)))
polygon(density(mtcars$qsec), col="violet") #pozytywna skośność
plot(density(mtcars$vs), main="vs", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$vs), 1)))
polygon(density(mtcars$vs), col="violet") #mała pozytywna skośność
plot(density(mtcars$am), main="am", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$am), 1)))
polygon(density(mtcars$am), col="violet") #pozytywna skośność
plot(density(mtcars$gear), main="gear", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$gear), 1)))
polygon(density(mtcars$gear), col="violet") # duża pozytywna skośność
plot(density(mtcars$carb), main="carb", ylab="Częstotliwość",
sub=paste("Skośność:", round(e1071::skewness(mtcars$carb), 1)))
polygon(density(mtcars$carb), col="violet") # bardzo duża pozytywna skośność
cor(mtcars$mpg, mtcars$cyl) # duża ujemna korelacja /
cor(mtcars$mpg, mtcars$disp) # duża ujemna korelacja /
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja /
cor(mtcars$mpg, mtcars$hp) #  ujemna korelacja  /
cor(mtcars$mpg, mtcars$drat) #  pozytywna korelacja  /
cor(mtcars$mpg, mtcars$vs) # pozytywna korelacja
cor(mtcars$mpg, mtcars$qsec) # brak /
cor(mtcars$mpg, mtcars$am) # mała pozytywna korelacja  /
cor(mtcars$mpg, mtcars$gear) # brak /
cor(mtcars$mpg, mtcars$carb) # mała ujemna korelacja /
?mtcars
cor(mtcars$mpg, mtcars$wt) # duża ujemna korelacja /
#https://earthdatascience.org/courses/earth-analytics/get-data-using-apis/use-twitter-api-r/
install.packages("rtweet")
install.packages("httpuv")
<<<<<<< HEAD
library(rtweet)
library(httpuv)
appname <- "magda_sentiment_analysis"
key <- "Cw4v8f0xPkjZz1UTLTTI8czoq"
secret <- "HZ6RKMn9LJI6oMvUomN7ZxBxyXSZSeXvXOG15DTNArAv5waKvc"
twitter_token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
smolensk_tweets <- search_tweets(q = "#smolensk",
n = 20)
# pierwsze rekordy
head(smolensk_tweets, n = 30)
head(smolensk_tweets$screen_name)
head(smolensk_tweets$text)
head(smolensk_tweets$country_code)
# struktura
names(smolensk_tweets)
str(smolensk_tweets)
dim(smolensk_tweets)
# struktura
names(smolensk_tweets)
plot(retweet_count~favorite_count)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
top20 <- arrange(smolensk_tweets, desc(favorite_count))
head(top20, n = 20)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count, col="blue", lwd=3)
top20 <- arrange(smolensk_tweets, desc(favorite_count))
head(top20, n = 20)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count, col="blue", lwd=3)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
scatter.smooth(x=smolensk_tweets$retweet_count, y=smolensk_tweets$favorite_count, main="Retweet count & Fav count")
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
scatter.smooth(x=smolensk_tweets$retweet_count, y=smolensk_tweets$favorite_count, main="Retweet count & Fav count")
plot(mtcars$mpg~mtcars$cyl)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
plot(mtcars$mpg~mtcars$cyl)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
plot(mtcars$cyl~mtcars$mpg)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
plot(mtcars$cyl~mtcars$mpg)
abline(lm(mtcars$cyl~mtcars$mpg), col="blue", lwd=3)
scatter.smooth(x=mtcars$mpg, y=mtcars$cyl, main="MPG & Cyl") #odwrotna proporcjonalność
abline(lm(mtcars$cyl ~ mtcars$mpg), col="blue", lwd=3)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
plot(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count)
abline(lm(smolensk_tweets$retweet_count~smolensk_tweets$favorite_count), col="blue", lwd=3)
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
runApp('jdsz1-sqluci/PROJEKT_R1')
shiny::runApp('jdsz1-sqluci/PROJEKT_R1')
=======
install_github("rstudio/shiny")  #instal shiny
install.packages("shiny")
install.packages("shiny")
library(devtools)
library(shinydashboard)
library(RPostgreSQL)
library(plyr)
library(dplyr)
library(scales)
library(wordcloud)
library(syuzhet)
library(tidyverse)
library(XML)
library(RCurl)
library(tidyr)
library(shiny)
runApp()
#install.packages("dplyr")
#install_github("rstudio/shiny")  #instal shiny
#install.packages("shiny")
#install.packages("shinydashboard")
#install.packages("wordcloud")
#install.packages("syuzhet")
#install.packages("tidyverse")
install.packages("tm")
library(tm)
runApp()
#install.packages("dplyr")
#install_github("rstudio/shiny")  #instal shiny
#install.packages("shiny")
#install.packages("shinydashboard")
#install.packages("wordcloud")
#install.packages("syuzhet")
#install.packages("tidyverse")
#install.packages("tm")
install.packages("SnowballC")
library(SnowballC)
runApp()
runApp()
getwd()
runApp()
install.packages("dplyr")
install_github("rstudio/shiny")  #instal shiny
library(devtools)
install_github("rstudio/shiny")  #instal shiny
shiny::runApp()
runApp()
runApp('~/JDS/R')
runApp()
runApp('~/JDS/R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df2)
View(df2)
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -Metoda badania, -Uwzgl. niezdecyd, -Termin badania)
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -Metoda badania, -Uwzgl.niezdecyd, -Termin badania)
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -'Metoda badania', -Uwzgl.niezdecyd, -Termin badania)
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -'Metoda badania', -Uwzgl.niezdecyd, -'Termin badania')
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -'Metoda badania', -'Uwzgl.niezdecyd', -'Termin badania')
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -'Metoda badania', -'Uwzgl.niezdecyd.', -'Termin badania')
df3 <- gather(data = df2, key = Partia, value = Proc, -Zleceniodawca, -'Metoda badania', -'Uwzgl. niezdecyd.', -'Termin badania')
View(df3)
View(df3)
df3 <- gather(data = df2, key = Partia, value = Proc, -'Zleceniodawca', -'Metoda badania', -'Uwzgl. niezdecyd.', -'Termin badania')
View(df3)
View(df3)
df3 <- gather(data = df2, key = Partia, value = Proc, -'Zleceniodawca', -'Metoda badania', -'Uwzgl. niezdecyd.', -'Termin badania')
View(df3)
View(df3)
df3 <- df2 %>%
select(-Metoda,-Uwzg.niezdecydowani)
df3 <- df2 %>%
select(-'Metoda badania',-'Uwzgl.niezdecyd.')
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl.niezdecyd.`)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`)
df3 <- gather(data = df2, key = Partia, value = Proc, -'Osrodek', -'Publikacja')
View(df3)
View(df3)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zlecedniodawca`, -`Termin badania``)
View(df3)
View(df3)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zlecedniodawca`, -`Termin badania`)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zlecedniodawca`, -`Termin badania`)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zleceniodawca`, -`Termin badania`)
View(df3)
View(df3)
df3 <- gather(data = df2, key = Partia, value = Proc, -'Osrodek', -'Publikacja')
df3 <- gather(data = df2, key = Partia, value = Proc, -'Ośrodek', -'Publikacja')
df3 <- gather(data = df2, key = Partia, value = Proc, -`Ośrodek`, -`Publikacja`)
df3 <- gather(data = df3, key = Partia, value = Proc, -`Ośrodek`, -`Publikacja`)
df3 <- gather(data = df3, key = Partia, value = Proc, -`Osrodek`, -`Publikacja`)
colnames(df2)[2]<- "Osrodek"  #zmiana bo z polskim znakiem nie dziala
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zleceniodawca`, -`Termin badania`)
df3 <- gather(data = df3, key = Partia, value = Proc, -`Osrodek`, -`Publikacja`)
df3 <- gather(data = df3, key = Partia, value = Proc, -`Osrodek`, -`Publikacja`)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zleceniodawca`, -`Termin badania`)
View(df3)
View(df3)
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zleceniodawca`, -`Termin badania`, -`11`)
df3 <- gather(data = df3, key = Partia, value = Proc, -`Osrodek`, -`Publikacja`)
View(df3)
View(df3)
runApp()
runApp()
View(df3)
View(df3)
runApp()
df3 <- df2 %>%
select(-`Metoda badania`,-`Uwzgl. niezdecyd.`, -`Zleceniodawca`, -`Termin badania`, -`11`)
View(df3)
df4 <- filter(data = df3, Partia=input$in_rb_partie_monika)
df3 <- gather(data = df3, key = Partia, value = Proc, -`Osrodek`, -`Publikacja`)
View(df3)
df4 <- filter(data = df3, Partia=input$in_rb_partie_monika)
df4 <- filter(data = df3, Partia==input$in_rb_partie_monika)
df4 <- filter(data = df3, df3$Partia==input$in_rb_partie_monika)
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 7d92d01f7374c69cad0abf54c71757568df6a237
